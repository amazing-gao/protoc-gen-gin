// Code generated by protoc-gen-box. DO NOT EDIT.
// source: example/api/api.proto

package api

import (
	"context"
	"github.com/gin-gonic/gin"
	"github.com/gin-gonic/gin/binding"
)

type EchoServiceGinServer interface {
	Echo(ctx context.Context, req *EchoReq) (resp *EchoResp, err error)
	Ping(ctx context.Context, req *PingReq) (resp *PingResp, err error)
}

func EchoServiceEcho(svc EchoServiceGinServer) func(ctx *gin.Context) {
	return func(ctx *gin.Context) {
		req := &EchoReq{}
		if err := ctx.ShouldBindWith(req, binding.Default(ctx.Request.Method, ctx.Request.Header.Get("Content-Type"))); err != nil {
			ctx.JSON(400, err)
			ctx.Abort()
			return
		}

		if resp, err := svc.Echo(ctx, req); err != nil {
			ctx.JSON(500, err)
			ctx.Abort()
		} else {
			ctx.JSON(200, resp)
		}
	}
}
func EchoServicePing(svc EchoServiceGinServer) func(ctx *gin.Context) {
	return func(ctx *gin.Context) {
		req := &PingReq{}
		if err := ctx.ShouldBindWith(req, binding.Default(ctx.Request.Method, ctx.Request.Header.Get("Content-Type"))); err != nil {
			ctx.JSON(400, err)
			ctx.Abort()
			return
		}

		if resp, err := svc.Ping(ctx, req); err != nil {
			ctx.JSON(500, err)
			ctx.Abort()
		} else {
			ctx.JSON(200, resp)
		}
	}
}

func RegisterEchoServiceGinServer(engine *gin.Engine, server EchoServiceGinServer) {
	engine.POST("/v1/example/echo", EchoServiceEcho(server))
	engine.GET("/v1/ping", EchoServicePing(server))
}
